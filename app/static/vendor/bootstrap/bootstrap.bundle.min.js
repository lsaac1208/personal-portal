/*!
 * Bootstrap v5.3.2 (minimal version)
 * Copyright 2011-2023 The Bootstrap Authors
 * Licensed under MIT
 */

// 最小化的Bootstrap JavaScript实现
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.bootstrap = {}));
}(this, (function (exports) { 'use strict';

  // 基础工具类
  const Util = {
    getTransitionDurationFromElement(element) {
      if (!element) return 0;
      let transitionDuration = window.getComputedStyle(element).transitionDuration;
      const floatTransitionDuration = parseFloat(transitionDuration);
      if (!floatTransitionDuration) return 0;
      transitionDuration = transitionDuration.split(',')[0];
      return parseFloat(transitionDuration) * 1000;
    }
  };

  // 模态框类
  class Modal {
    constructor(element, config = {}) {
      this.element = element;
      this.config = config;
      this.isShown = false;
    }

    show() {
      if (this.isShown) return;
      this.isShown = true;
      this.element.style.display = 'block';
      this.element.classList.add('show');
      document.body.classList.add('modal-open');
    }

    hide() {
      if (!this.isShown) return;
      this.isShown = false;
      this.element.style.display = 'none';
      this.element.classList.remove('show');
      document.body.classList.remove('modal-open');
    }

    static getInstance(element) {
      return element._bsModal || null;
    }
  }

  // 提示框类
  class Tooltip {
    constructor(element, config = {}) {
      this.element = element;
      this.config = config;
    }
    
    show() {}
    hide() {}
    dispose() {}
  }

  // 弹出框类
  class Popover extends Tooltip {
    constructor(element, config = {}) {
      super(element, config);
    }
  }

  // Alert类
  class Alert {
    constructor(element) {
      this.element = element;
      this._bindEvents();
    }

    _bindEvents() {
      const closeButton = this.element.querySelector('[data-bs-dismiss="alert"]');
      if (closeButton) {
        closeButton.addEventListener('click', () => this.close());
      }
    }

    close() {
      this.element.style.display = 'none';
    }
  }

  // Toast类
  class Toast {
    constructor(element, config = {}) {
      this.element = element;
      this.config = { delay: 5000, ...config };
      this.isShown = false;
    }

    show() {
      if (this.isShown) return;
      this.isShown = true;
      this.element.style.display = 'block';
      this.element.classList.add('show');
      
      if (this.config.delay > 0) {
        setTimeout(() => this.hide(), this.config.delay);
      }
    }

    hide() {
      if (!this.isShown) return;
      this.isShown = false;
      this.element.classList.remove('show');
      setTimeout(() => {
        this.element.style.display = 'none';
        this.element.dispatchEvent(new CustomEvent('hidden.bs.toast'));
      }, 150);
    }
  }

  // 自动初始化
  document.addEventListener('DOMContentLoaded', function() {
    // 自动初始化Alert
    document.querySelectorAll('.alert').forEach(element => {
      new Alert(element);
    });
  });

  // 导出
  exports.Modal = Modal;
  exports.Tooltip = Tooltip;
  exports.Popover = Popover;
  exports.Alert = Alert;
  exports.Toast = Toast;

  // 全局绑定
  Object.defineProperty(exports, '__esModule', { value: true });

})));